#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

// List of keywords (example set, can be expanded)
const char *keywords[] = {"int", "float", "if", "else", "while", "for", "return", NULL};

// List of operators (example set, can be expanded)
const char operators[] = {"+", "-", "", "/", "=", "==", "<", ">", "<=", ">=", NULL};

// Function to check if a token is a keyword
int isKeyword(const char *token) {
    for (int i = 0; keywords[i] != NULL; i++) {
        if (strcmp(token, keywords[i]) == 0) {
            return 1;
        }
    }
    return 0;
}

// Function to check if a token is an operator
int isOperator(const char *token) {
    for (int i = 0; operators[i] != NULL; i++) {
        if (strcmp(token, operators[i]) == 0) {
            return 1;
        }
    }
    return 0;
}

// Function to check if a token is a valid identifier
int isIdentifier(const char *token) {
    if (!isalpha(token[0]) && token[0] != '_') {
        return 0; // Identifiers must start with a letter or underscore
    }
    for (int i = 1; token[i] != '\0'; i++) {
        if (!isalnum(token[i]) && token[i] != '_') {
            return 0; // Identifiers can only contain letters, digits, or underscores
        }
    }
    return 1;
}

void lexicalAnalyzer(const char *filename) {
    FILE *fp = fopen(filename, "r");
    if (fp == NULL) {
        printf("Error opening file %s!\n", filename);
        return;
    }

    char buffer[100]; // Buffer to store each token
    int c, i = 0;

    printf("Lexical Analysis Results:\n");
    printf("------------------------\n");

    while ((c = fgetc(fp)) != EOF) {
        // Skip whitespace
        if (isspace(c)) {
            continue;
        }

        // Handle operators and delimiters
        if (c == '+' || c == '-' || c == '*' || c == '/' || c == '=' || c == '<' || c == '>') {
            buffer[i++] = c;
            // Check for two-character operators like ==, <=, >=
            int next = fgetc(fp);
            if ((c == '=' && next == '=') || (c == '<' && next == '=') || (c == '>' && next == '=')) {
                buffer[i++] = next;
            } else {
                ungetc(next, fp); // Put back the character if not part of operator
            }
            buffer[i] = '\0';
            if (isOperator(buffer)) {
                printf("Operator: %s\n", buffer);
            }
            i = 0;
            continue;
        }

        // Handle delimiters like ; , ( )
        if (c == ';' || c == ',' || c == '(' || c == ')' || c == '{' || c == '}') {
            buffer[0] = c;
            buffer[1] = '\0';
            printf("Delimiter: %s\n", buffer);
            continue;
        }

        // Handle identifiers and keywords
        if (isalpha(c) || c == '_') {
            buffer[i++] = c;
            while ((c = fgetc(fp)) != EOF && (isalnum(c) || c == '_')) {
                buffer[i++] = c;
            }
            buffer[i] = '\0';
            ungetc(c, fp); // Put back the last character

            if (isKeyword(buffer)) {
                printf("Keyword: %s\n", buffer);
            } else if (isIdentifier(buffer)) {
                printf("Identifier: %s\n", buffer);
            } else {
                printf("Unknown: %s\n", buffer);
            }
            i = 0;
            continue;
        }

        // Handle numbers (basic support, can be enhanced)
        if (isdigit(c)) {
            buffer[i++] = c;
            while ((c = fgetc(fp)) != EOF && isdigit(c)) {
                buffer[i++] = c;
            }
            buffer[i] = '\0';
            ungetc(c, fp);
            printf("Number: %s\n", buffer);
            i = 0;
            continue;
        }
    }

    fclose(fp);
    printf("------------------------\n");
}

int main() {
    char filename[50];
    printf("Enter the input file name: ");
    scanf("%s", filename);
    lexicalAnalyzer(filename);
    return 0;
}
